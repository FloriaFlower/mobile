/**
 * ÊâãÊú∫ÂâçÁ´ØÊ°ÜÊû∂
 * ÂèØÁà±ÁöÑiOSÈ£éÊ†ºÊâãÊú∫ÁïåÈù¢
 */
class MobilePhone {
  constructor() {
    this.isVisible = false;
    this.currentApp = null;
    this.apps = {};
    this.appStack = [];
    this.currentAppState = null;
    this.dragHelper = null;
    this.frameDragHelper = null;
    this._openingApp = null;
    this._goingHome = false;
    this._returningToApp = null;
    this._lastAppIconClick = 0;
    this._lastBackButtonClick = 0;
    this._loadingApps = new Set();
    this._userNavigationIntent = null;
    this._loadingStartTime = {};
    this.init();
  }

  init() {
    this.loadDragHelper();
    this.clearPositionCache();
    this.createPhoneButton();
    this.createPhoneContainer();
    this.registerApps();
    this.startClock();
    setTimeout(() => {
      this.initTextColor();
    }, 1000);
  }

  loadDragHelper() {
    const cssLink = document.createElement('link');
    cssLink.rel = 'stylesheet';
    cssLink.href = '/scripts/extensions/third-party/mobile/drag-helper.css';
    document.head.appendChild(cssLink);

    if (typeof DragHelper === 'undefined') {
      const script = document.createElement('script');
      script.src = '/scripts/extensions/third-party/mobile/drag-helper.js';
      script.onload = () => {
        console.log('[Mobile Phone] ÊãñÊãΩÊèí‰ª∂Âä†ËΩΩÊàêÂäü');
      };
      script.onerror = () => {
        console.error('[Mobile Phone] ÊãñÊãΩÊèí‰ª∂Âä†ËΩΩÂ§±Ë¥•');
      };
      document.head.appendChild(script);
    }
  }

  createPhoneButton() {
    try {
      const existingButton = document.getElementById('mobile-phone-trigger');
      if (existingButton) {
        existingButton.remove();
      }

      const button = document.createElement('button');
      button.id = 'mobile-phone-trigger';
      button.className = 'mobile-phone-trigger';
      button.innerHTML = 'üì±';
      button.title = 'ÊâìÂºÄÊâãÊú∫ÁïåÈù¢';
      button.addEventListener('click', () => this.togglePhone());

      if (!document.body) {
        console.error('[Mobile Phone] ‰∏•ÈáçÈîôËØØÔºödocument.body ‰ªç‰∏çÂ≠òÂú®ÔºÅ');
        setTimeout(() => this.createPhoneButton(), 500);
        return;
      }

      document.body.appendChild(button);
      this.initDragForButton(button);
    } catch (error) {
      console.error('[Mobile Phone] ÂàõÂª∫ÊåâÈíÆÊó∂ÂèëÁîüÈîôËØØ:', error.stack);
    }
  }

  initDragForButton(button) {
    const tryInitDrag = () => {
      if (typeof DragHelper !== 'undefined') {
        if (this.dragHelper) {
          this.dragHelper.destroy();
        }
        this.dragHelper = new DragHelper(button, {
          boundary: document.body,
          clickThreshold: 8,
          dragClass: 'mobile-phone-trigger-dragging',
          savePosition: false,
          storageKey: 'mobile-phone-trigger-position',
        });
      } else {
        setTimeout(tryInitDrag, 100);
      }
    };
    tryInitDrag();
  }

  clearPositionCache() {
    try {
      localStorage.removeItem('mobile-phone-trigger-position');
      localStorage.removeItem('mobile-phone-frame-position');
    } catch (error) {
      console.warn('[Mobile Phone] Ê∏ÖÁêÜ‰ΩçÁΩÆÁºìÂ≠òÊó∂ÂèëÁîüÈîôËØØ:', error);
    }
  }

  initFrameDrag() {
    const tryInitFrameDrag = () => {
      if (typeof DragHelper !== 'undefined') {
        const phoneFrame = document.querySelector('.mobile-phone-frame');
        if (phoneFrame) {
          if (this.frameDragHelper) {
            this.frameDragHelper.destroy();
          }
          this.frameDragHelper = new DragHelper(phoneFrame, {
            boundary: document.body,
            clickThreshold: 10,
            dragClass: 'mobile-phone-frame-dragging',
            savePosition: false,
            storageKey: 'mobile-phone-frame-position',
            touchTimeout: 300,
            dragHandle: '.mobile-status-bar',
          });
        }
      } else {
        setTimeout(tryInitFrameDrag, 100);
      }
    };
    tryInitFrameDrag();
  }

  createPhoneContainer() {
    try {
      const existingContainer = document.getElementById('mobile-phone-container');
      if (existingContainer) {
        existingContainer.remove();
      }

      const container = document.createElement('div');
      container.id = 'mobile-phone-container';
      container.className = 'mobile-phone-container';
      container.style.display = 'none';
      container.innerHTML = `
                <div class="mobile-phone-overlay"></div>
                <div class="mobile-phone-frame">
                    <div class="mobile-phone-screen">
                        <div class="mobile-status-bar">
                            <div class="status-left">
                                <span class="time" id="mobile-time">08:08</span>
                            </div>
                            <div class="status-center">
                                <div class="dynamic-island"></div>
                            </div>
                            <div class="status-right">
                                <span class="battery">
                                    <span class="battery-icon">üîã</span>
                                    <span class="battery-text">100%</span>
                                </span>
                            </div>
                        </div>
                        <div class="mobile-content" id="mobile-content">
                            <div class="home-screen" id="home-screen">
                                <div class="weather-card">
                                    <div class="weather-time">
                                        <span class="current-time" id="home-time">08:08</span>                                  
                                    </div>
                                </div>
                                <div class="app-grid">
                                    <div class="app-row">
                                        <div class="app-icon" data-app="shop">
                                            <div class="app-icon-bg purple">üõç</div>
                                            <span class="app-label">Ë¥≠Áâ©</span>
                                        </div>
                                        <div class="app-icon" data-app="task">
                                            <div class="app-icon-bg purple">üìù</div>
                                            <span class="app-label">ÊâãÂ∏ê</span>
                                        </div>
                                        <div class="app-icon" data-app="messages">
                                            <div class="app-icon-bg pink">üí¨</div>
                                            <span class="app-label">‰ø°ÊÅØ</span>
                                        </div>                                  
                                    </div>
                                    <div class="app-row">
                                        <div class="app-icon" data-app="aoka">
                                            <div class="app-icon-bg orange">üêæ</div>
                                            <span class="app-label">Âó∑Âíî</span>
                                        </div>
                                        <div class="app-icon" data-app="live">
                                            <div class="app-icon-bg red">üé•</div>
                                            <span class="app-label">Áõ¥Êí≠</span>
                                        </div>
                                        <div class="app-icon" data-app="yuse-theater">
                                            <div class="app-icon-bg pink">üé¨</div>
                                            <span class="app-label">Ê¨≤Ëâ≤ÂâßÂú∫</span>
                                        </div>
                                    </div>
                                    <div class="app-row">
                                        <div class="app-icon" data-app="forum">
                                            <div class="app-icon-bg red">üì∞</div>
                                            <span class="app-label">ËÆ∫Âùõ</span>
                                        </div>
                                        <div class="app-icon" data-app="weibo">
                                            <div class="app-icon-bg orange" style="font-size: 22px;color:rgba(0,0,0,0.4)">üß£</div>
                                            <span class="app-label">ÂæÆÂçö</span>
                                        </div>                         
                                        <div class="app-icon" data-app="redbook">
                                            <div class="app-icon-bg purple">üç†</div>
                                            <span class="app-label">Â∞èÁ∫¢‰π¶</span>
                                        </div>
                                    </div>
                                    <div class="app-row">
                                        <div class="app-icon" data-app="browser">
                                            <div class="app-icon-bg orange">üíª</div>
                                            <span class="app-label">ÊµèËßàÂô®</span>
                                        </div>
                                        <div class="app-icon" data-app="api">
                                            <div class="app-icon-bg orange" style="font-size: 22px;color:rgba(0,0,0,0.4)">AI</div>
                                            <span class="app-label">API</span>
                                        </div>
                                        <div class="app-icon" data-app="settings">
                                            <div class="app-icon-bg purple">‚öôÔ∏è</div>
                                            <span class="app-label">ËÆæÁΩÆ</span>
                                        </div>
                                    </div>
                                    <div style="display: none;">
                                        <div class="app-icon" data-app="gallery">
                                            <div class="app-icon-bg blue">üì∏</div>
                                            <span class="app-label">Áõ∏ÂÜå</span>
                                        </div>
                                        <div class="app-icon" data-app="mail">
                                            <div class="app-icon-bg orange">‚úâÔ∏è</div>
                                            <span class="app-label">ÈÇÆ‰ª∂</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="bottom-decoration">
                                    <div class="cute-animal">üê±</div>
                                    <div class="cute-animal">üê∂</div>
                                </div>
                            </div>
                            <div class="app-screen" id="app-screen" style="display: none;">
                                <div class="app-header" id="app-header">
                                    <button class="back-button" id="back-button">
                                        <span class="back-icon">‚Üê</span>
                                    </button>
                                    <h1 class="app-title" id="app-title">Â∫îÁî®</h1>
                                    <div class="app-header-right" id="app-header-right">
                                    </div>
                                </div>
                                <div class="app-content" id="app-content">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

      if (!document.body) {
        console.error('[Mobile Phone] document.body ‰∏çÂ≠òÂú®ÔºåÂª∂ËøüÂàõÂª∫ÂÆπÂô®');
        setTimeout(() => this.createPhoneContainer(), 100);
        return;
      }

      document.body.appendChild(container);
      this.bindEvents();
      this.initFrameDrag();
    } catch (error) {
      console.error('[Mobile Phone] ÂàõÂª∫ÂÆπÂô®Êó∂ÂèëÁîüÈîôËØØ:', error);
    }
  }

  bindEvents() {
    document.querySelector('.mobile-phone-overlay').addEventListener('click', () => {
      const isCompatibilityMode =
        window.MobileContextPlugin &&
        window.MobileContextPlugin.getSettings &&
        window.MobileContextPlugin.getSettings().tavernCompatibilityMode;
      if (!isCompatibilityMode) {
        this.hidePhone();
      }
    });

    document.getElementById('back-button').addEventListener('click', () => {
      if (this._lastBackButtonClick && Date.now() - this._lastBackButtonClick < 300) {
        return;
      }
      this._lastBackButtonClick = Date.now();
      this.handleBackButton();
    });

    document.querySelectorAll('.app-icon').forEach(icon => {
      icon.addEventListener('click', e => {
        const appName = e.currentTarget.getAttribute('data-app');
        if (this._lastAppIconClick && Date.now() - this._lastAppIconClick < 300) {
          return;
        }
        this._lastAppIconClick = Date.now();
        this.openApp(appName);
      });
    });
  }

  handleBackButton() {
    this._userNavigationIntent = null;

    if (!this.currentAppState) {
      this.goHome();
      return;
    }

    const currentApp = this.currentAppState.app;
    const atRoot = this.isCurrentlyAtAppRoot(currentApp, this.currentAppState);

    if (this.currentApp && this.currentApp !== currentApp) {
      this.currentApp = currentApp;
    }

    if (!atRoot) {
      this.returnToAppMain(currentApp);
      return;
    }

    this.goHome();
  }

  returnToForumMainList() {
    const forumMainState = {
      app: 'forum',
      title: 'ËÆ∫Âùõ',
      view: 'main',
    };
    this.appStack = [forumMainState];
    this.currentAppState = forumMainState;
    this.currentApp = 'forum';
    this.updateAppHeader(forumMainState);

    if (window.getForumAppContent && window.bindForumEvents) {
      const forumContent = window.getForumAppContent();
      if (forumContent) {
        document.getElementById('app-content').innerHTML = forumContent;
        window.bindForumEvents();
        if (window.forumUI) {
          window.forumUI.currentThreadId = null;
          if (window.forumUI.resetState) {
            window.forumUI.resetState();
          }
        }
      } else {
        this.handleForumApp();
      }
    } else {
      this.handleForumApp();
    }
  }

  returnToMessageList() {
    const messageListState = {
      app: 'messages',
      title: '‰ø°ÊÅØ',
      view: 'messageList',
    };
    this.appStack = [messageListState];
    this.currentAppState = messageListState;
    this.updateAppHeader(messageListState);

    if (window.messageApp && window.messageApp.showMessageList) {
      window.messageApp.currentView = 'messageList';
      window.messageApp.currentFriendId = null;
      window.messageApp.currentFriendName = null;
      window.messageApp.showMessageList();
    }
  }

  isAppRootPage(state) {
    if (!state) return false;

    if (state.app === 'messages') {
      return state.view === 'messageList' || state.view === 'main' || state.view === 'list';
    }

    if (state.app === 'forum') {
      return state.view === 'main' || !state.view || state.view === 'list';
    }

    return state.view === 'main';
  }

  restoreAppState(state) {
    this.currentAppState = state;
    this.updateAppHeader(state);

    if (state.app === 'messages') {
      if (state.view === 'messageList' || state.view === 'list') {
        if (window.messageApp) {
          window.messageApp.currentView = 'list';
          window.messageApp.currentFriendId = null;
          window.messageApp.currentFriendName = null;
          window.messageApp.updateAppContent();
        }
      } else if (state.view === 'messageDetail') {
        if (window.messageApp) {
          window.messageApp.currentView = 'messageDetail';
          window.messageApp.currentFriendId = state.friendId;
          window.messageApp.currentFriendName = state.friendName;
          window.messageApp.updateAppContent();
        }
      } else if (state.view === 'addFriend') {
        if (window.messageApp) {
          window.messageApp.currentView = 'addFriend';
          window.messageApp.currentTab = 'add';
          window.messageApp.updateAppContent();
        }
      } else if (state.view === 'friendsCircle') {
        if (window.messageApp) {
          window.messageApp.currentMainTab = 'circle';
          window.messageApp.currentView = 'list';
          if (window.messageApp.friendsCircle) {
            window.messageApp.friendsCircle.activate();
          } else {
            window.messageApp.initFriendsCircle();
            setTimeout(() => {
              if (window.messageApp.friendsCircle) {
                window.messageApp.friendsCircle.activate();
              }
            }, 100);
          }
          window.messageApp.updateAppContent();
          setTimeout(() => {
            const circleState = {
              app: 'messages',
              view: 'friendsCircle',
              title: 'ÊúãÂèãÂúà',
              showBackButton: false,
              showAddButton: true,
              addButtonIcon: 'fas fa-camera',
              addButtonAction: () => {
                if (window.friendsCircle) {
                  window.friendsCircle.showPublishModal();
                }
              },
            };
            this.currentAppState = circleState;
            this.updateAppHeader(circleState);
          }, 200);
        }
      }
    } else if (state.app === 'forum') {
      if (state.view === 'threadDetail' && state.threadId) {
        if (window.forumUI) {
          window.forumUI.currentThreadId = state.threadId;
          const forumContent = document.getElementById('forum-content');
          if (forumContent) {
            forumContent.innerHTML = window.forumUI.getThreadDetailHTML(state.threadId);
            window.forumUI.bindReplyEvents();
          }
        }
      } else if (state.view === 'forumControl') {
        this.handleForumApp();
      } else {
        if (window.forumUI) {
          window.forumUI.currentThreadId = null;
          const forumContent = document.getElementById('forum-content');
          if (forumContent) {
            forumContent.innerHTML = window.forumUI.getThreadListHTML();
            if (window.bindForumEvents) {
              window.bindForumEvents();
            }
          }
        } else {
          this.handleForumApp();
        }
      }
    }
  }

  updateAppHeader(state) {
    const titleElement = document.getElementById('app-title');
    const headerRight = document.getElementById('app-header-right');
    if (!state) {
      titleElement.textContent = 'Â∫îÁî®';
      headerRight.innerHTML = '';
      return;
    }

    titleElement.textContent = state.title || this.apps[state.app]?.name || 'Â∫îÁî®';

    const appScreen = document.getElementById('app-screen');
    const appContent = document.getElementById('app-content');
    const appHeader = document.getElementById('app-header');
    if (appScreen) {
      appScreen.setAttribute('data-app', state.app || '');
      appScreen.setAttribute('data-view', state.view || 'main');
      Array.from(appScreen.classList).forEach(c => {
        if (c.startsWith('app-root-')) appScreen.classList.remove(c);
      });
      if (this.isAppRootPage(state)) {
        appScreen.classList.add(`app-root-${state.app}`);
      }
    }
    if (appContent) {
      appContent.setAttribute('data-app', state.app || '');
      appContent.setAttribute('data-view', state.view || 'main');
    }
    if (appHeader) {
      appHeader.setAttribute('data-app', state.app || '');
      appHeader.setAttribute('data-view', state.view || 'main');
    }

    headerRight.innerHTML = '';

    // Ê¨≤Ëâ≤ÂâßÂú∫‰∏ìÂ±ûÈ°µÁúâÊåâÈíÆÈÄªËæëÔºàÁä∂ÊÄÅÈ©±Âä®+Âç≥Êó∂ÈîÄÊØÅÔºâ
    if (state.app === 'yuse-theater') {
      // 1. Ê∏ÖÁêÜÊÆãÁïôÊåâÈíÆÔºàÂç≥Êó∂ÈîÄÊØÅÔºâ
      const existingRefreshBtn = document.getElementById('yuse-refresh-btn');
      if (existingRefreshBtn) existingRefreshBtn.remove();
      
      // 2. ÂàõÂª∫Âà∑Êñ∞ÊåâÈíÆÔºàÁä∂ÊÄÅÈ©±Âä®Ôºâ
      const refreshBtn = document.createElement('button');
      refreshBtn.id = 'yuse-refresh-btn';
      refreshBtn.className = 'app-header-btn yuse-theater-btn';
      refreshBtn.innerHTML = '<<i class="fas fa-sync-alt"></</i>';
      refreshBtn.title = 'Âà∑Êñ∞ÂâßÂú∫ÂÜÖÂÆπ';
      
      // 3. ÁªëÂÆöÁÇπÂáª‰∫ã‰ª∂ÔºàËß¶ÂèëËá™ÂÆö‰πâÂà∑Êñ∞ÊñπÊ≥ïÔºâ
      refreshBtn.addEventListener('click', () => {
        if (window.yuseTheaterApp && typeof window.yuseTheaterApp.refreshTheater === 'function') {
          window.yuseTheaterApp.refreshTheater();
        }
      });
      
      headerRight.appendChild(refreshBtn);
      console.log('[YuseTheater] ÊøÄÊ¥ª‰∏ìÂ±ûÊåâÈíÆ: yuse-refresh-btn');
    } 
    // TaskÂ∫îÁî®ÂéüÊúâÈÄªËæë
    else if (state.app === 'task') {
      const viewBtn = document.createElement('button');
      viewBtn.className = 'app-header-btn';
      viewBtn.innerHTML = 'Êü•Áúã';
      viewBtn.title = 'Êü•Áúã‰ªªÂä°';
      viewBtn.addEventListener('click', () => {
        if (window.taskAppSendViewMessage) {
          window.taskAppSendViewMessage();
        }
      });
      headerRight.appendChild(viewBtn);
    }
    // ÂÖ∂‰ªñÂ∫îÁî®ÂéüÊúâÈÄªËæë
    else if (state.app === 'messages') {
      if (state.view === 'messageList' || state.view === 'list') {
        const textColorBtn = document.createElement('button');
        textColorBtn.className = 'app-header-btn text-color-toggle';
        textColorBtn.innerHTML = this.getCurrentTextColor() === 'white' ? 'Èªë' : 'ÁôΩ';
        textColorBtn.title = 'ÂàáÊç¢ÊñáÂ≠óÈ¢úËâ≤';
        textColorBtn.addEventListener('click', () => this.toggleTextColor());
        headerRight.appendChild(textColorBtn);

        const imageConfigBtn = document.createElement('button');
        imageConfigBtn.className = 'app-header-btn';
        imageConfigBtn.innerHTML = '<<i class="fas fa-image"></</i>';
        imageConfigBtn.title = 'ÂõæÁâáËÆæÁΩÆ';
        imageConfigBtn.addEventListener('click', () => this.showImageConfigModal());
        headerRight.appendChild(imageConfigBtn);

        const addFriendBtn = document.createElement('button');
        addFriendBtn.className = 'app-header-btn';
        addFriendBtn.innerHTML = '‚ûï';
        addFriendBtn.title = 'Ê∑ªÂä†Â•ΩÂèã';
        addFriendBtn.addEventListener('click', () => this.showAddFriend());
        headerRight.appendChild(addFriendBtn);
      } else if (state.view === 'messageDetail') {
        if (state.friendId && !this.isGroupChat(state.friendId)) {
          const photoBtn = document.createElement('button');
          photoBtn.className = 'app-header-btn';
          photoBtn.innerHTML = '<<i class="fas fa-image"></</i>';
          photoBtn.title = 'Áõ∏ÁâáËÆæÁΩÆ';
          photoBtn.addEventListener('click', () => this.showFriendImageConfigModal(state.friendId, state.friendName));
          headerRight.appendChild(photoBtn);
        }

        const refreshBtn = document.createElement('button');
        refreshBtn.className = 'app-header-btn';
        refreshBtn.innerHTML = '<<i class="fas fa-sync-alt"></</i>';
        refreshBtn.title = 'Âà∑Êñ∞Ê∂àÊÅØ';
        refreshBtn.addEventListener('click', () => this.refreshMessageDetail());
        headerRight.appendChild(refreshBtn);
      } else if (state.view === 'addFriend') {
        const saveBtn = document.createElement('button');
        saveBtn.className = 'app-header-btn';
        saveBtn.innerHTML = '‚úÖ';
        saveBtn.title = '‰øùÂ≠ò';
        saveBtn.addEventListener('click', () => this.saveAddFriend());
        headerRight.appendChild(saveBtn);
      } else if (state.view === 'friendsCircle') {
        const generateBtn = document.createElement('button');
        generateBtn.className = 'app-header-btn';
        generateBtn.innerHTML = '<<i class="fas fa-sync-alt"></</i>';
        generateBtn.title = 'ÁîüÊàêÊúãÂèãÂúà';
        generateBtn.addEventListener('click', () => {
          this.generateFriendsCircleContent();
        });
        headerRight.appendChild(generateBtn);

        const cameraBtn = document.createElement('button');
        cameraBtn.className = 'app-header-btn';
        cameraBtn.innerHTML = '<<i class="fas fa-camera"></</i>';
        cameraBtn.title = 'ÂèëÂ∏ÉÊúãÂèãÂúà';
        cameraBtn.addEventListener('click', () => {
          if (window.friendsCircle) {
            window.friendsCircle.showPublishModal();
          }
        });
        headerRight.appendChild(cameraBtn);
      }
    } else if (state.app === 'gallery') {
      const selectBtn = document.createElement('button');
      selectBtn.className = 'app-header-btn';
      selectBtn.innerHTML = '‚úì';
      selectBtn.title = 'ÈÄâÊã©';
      selectBtn.addEventListener('click', () => this.toggleGallerySelect());
      headerRight.appendChild(selectBtn);
    } else if (state.app === 'forum') {
      if (state.view === 'threadDetail') {
        const refreshBtn = document.createElement('button');
        refreshBtn.className = 'app-header-btn';
        refreshBtn.innerHTML = 'Âà∑Êñ∞';
        refreshBtn.title = 'Âà∑Êñ∞';
        refreshBtn.style.background = '#e5c9c7';
        refreshBtn.style.color = 'white';
        refreshBtn.addEventListener('click', () => {
          if (window.forumUI) {
            window.forumUI.refreshForum();
          }
        });
        headerRight.appendChild(refreshBtn);
      } else {
        const generateBtn = document.createElement('button');
        generateBtn.className = 'app-header-btn';
        generateBtn.innerHTML = 'ÁîüÊàê';
        generateBtn.title = 'Á´ãÂç≥ÁîüÊàêËÆ∫Âùõ';
        generateBtn.style.background = '#e5c9c7';
        generateBtn.style.color = 'white';
        generateBtn.addEventListener('click', () => {
          if (window.forumManager) {
            if (window.showMobileToast) {
              window.showMobileToast('üöÄ Ê≠£Âú®ÁîüÊàêËÆ∫ÂùõÂÜÖÂÆπ...', 'info');
            }
            window.forumManager
              .generateForumContent(true)
              .then(() => {
                if (window.showMobileToast) {
                  window.showMobileToast('‚úÖ ËÆ∫ÂùõÂÜÖÂÆπÁîüÊàêÂÆåÊàê', 'success');
                }
              })
              .catch(error => {
                console.error('[Mobile Phone] ÁîüÊàêËÆ∫ÂùõÂÜÖÂÆπÂ§±Ë¥•:', error);
                if (window.showMobileToast) {
                  window.showMobileToast('‚ùå ÁîüÊàêÂ§±Ë¥•: ' + error.message, 'error');
                }
              });
          }
        });
        headerRight.appendChild(generateBtn);

        const postBtn = document.createElement('button');
        postBtn.className = 'app-header-btn';
        postBtn.innerHTML = 'ÂèëÂ∏ñ';
        postBtn.title = 'ÂèëÂ∏ñ';
        postBtn.style.background = '#e5c9c7';
        postBtn.style.color = 'white';
        postBtn.addEventListener('click', () => {
          if (window.forumUI) {
            window.forumUI.showPostDialog();
          }
        });
        headerRight.appendChild(postBtn);

        const styleBtn = document.createElement('button');
        styleBtn.className = 'app-header-btn';
        styleBtn.innerHTML = 'È£éÊ†º';
        styleBtn.title = 'ËÆ∫ÂùõÈ£éÊ†ºËÆæÁΩÆ';
        styleBtn.style.background = '#e5c9c7';
        styleBtn.style.color = 'white';
        styleBtn.addEventListener('click', () => {
          window.mobilePhone.openApp('api');
          setTimeout(() => {
            const forumStylesTab = document.querySelector('[data-tab="forum-styles"]');
            if (forumStylesTab) {
              forumStylesTab.click();
            }
          }, 300);
        });
        headerRight.appendChild(styleBtn);

        const refreshBtn = document.createElement('button');
        refreshBtn.className = 'app-header-btn';
        refreshBtn.innerHTML = 'Âà∑Êñ∞';
        refreshBtn.title = 'Âà∑Êñ∞';
        refreshBtn.style.background = '#e5c9c7';
        refreshBtn.style.color = 'white';
        refreshBtn.addEventListener('click', () => {
          if (window.forumUI) {
            window.forumUI.refreshForum();
          }
        });
        headerRight.appendChild(refreshBtn);
      }
    } else if (state.app === 'weibo') {
      const generateBtn = document.createElement('button');
      generateBtn.className = 'app-header-btn';
      generateBtn.innerHTML = 'ÁîüÊàê';
      generateBtn.title = 'Á´ãÂç≥ÁîüÊàêÂæÆÂçö';
      generateBtn.style.background = '#ff8500';
      generateBtn.style.color = 'white';
      generateBtn.addEventListener('click', async () => {
        if (window.weiboManager) {
          MobilePhone.showToast('üîÑ ÂºÄÂßãÁîüÊàêÂæÆÂçöÂÜÖÂÆπ...', 'processing');
          try {
            const result = await window.weiboManager.generateWeiboContent(true);
            if (result) {
              MobilePhone.showToast('‚úÖ ÂæÆÂçöÂÜÖÂÆπÁîüÊàêÊàêÂäüÔºÅÂ∑≤ÊèíÂÖ•Âà∞Á¨¨1Ê•ºÂ±Ç', 'success');
            } else {
              MobilePhone.showToast('‚ö†Ô∏è ÂæÆÂçöÂÜÖÂÆπÁîüÊàêÂ§±Ë¥•ÊàñË¢´Ë∑≥Ëøá', 'warning');
            }
          } catch (error) {
            console.error('[Mobile Phone] ÁîüÊàêÂæÆÂçöÂÜÖÂÆπÂá∫Èîô:', error);
            MobilePhone.showToast(`‚ùå ÁîüÊàêÂ§±Ë¥•: ${error.message}`, 'error');
          }
        } else {
          console.error('[Mobile Phone] ÂæÆÂçöÁÆ°ÁêÜÂô®Êú™ÊâæÂà∞');
        }
      });
      headerRight.appendChild(generateBtn);

      const refreshBtn = document.createElement('button');
      refreshBtn.className = 'app-header-btn';
      refreshBtn.innerHTML = 'Âà∑Êñ∞';
      refreshBtn.title = 'Âà∑Êñ∞';
      refreshBtn.style.background = '#ff8500';
      refreshBtn.style.color = 'white';
      refreshBtn.addEventListener('click', () => {
        if (window.weiboUI && window.weiboUI.refreshWeiboList) {
          window.weiboUI.refreshWeiboList();
        } else {
          console.error('[Mobile Phone] ÂæÆÂçöUIÊú™ÊâæÂà∞');
        }
      });
      headerRight.appendChild(refreshBtn);

      const postBtn = document.createElement('button');
      postBtn.className = 'app-header-btn';
      postBtn.innerHTML = 'ÂèëÂçö';
      postBtn.title = 'ÂèëÂçö';
      postBtn.style.background = '#ff8500';
      postBtn.style.color = 'white';
      postBtn.addEventListener('click', () => {
        if (window.weiboControlApp && window.weiboControlApp.showPostDialog) {
          window.weiboControlApp.showPostDialog();
        } else {
          console.error('[Mobile Phone] ÂæÆÂçöÊéßÂà∂Â∫îÁî®Êú™Â∞±Áª™');
        }
      });
      headerRight.appendChild(postBtn);

      const switchAccountBtn = document.createElement('button');
      switchAccountBtn.className = 'app-header-btn';
      const isMainAccount = window.weiboManager ? window.weiboManager.currentAccount.isMainAccount : true;
      switchAccountBtn.innerHTML = isMainAccount ? 'ÂàáÂ∞èÂè∑' : 'ÂàáÂ§ßÂè∑';
      switchAccountBtn.title = isMainAccount ? 'ÂàáÊç¢Âà∞Â∞èÂè∑' : 'ÂàáÊç¢Âà∞Â§ßÂè∑';
      switchAccountBtn.style.background = '#ff8500';
      switchAccountBtn.style.color = 'white';
      switchAccountBtn.addEventListener('click', () => {
        if (window.weiboManager && window.weiboManager.switchAccount) {
          const newIsMainAccount = window.weiboManager.switchAccount();
          switchAccountBtn.innerHTML = newIsMainAccount ? 'ÂàáÂ∞èÂè∑' : 'ÂàáÂ§ßÂè∑';
          switchAccountBtn.title = newIsMainAccount ? 'ÂàáÊç¢Âà∞Â∞èÂè∑' : 'ÂàáÊç¢Âà∞Â§ßÂè∑';
          if (window.weiboUI && window.weiboUI.updateUsernameDisplay) {
            window.weiboUI.updateUsernameDisplay();
          }
          if (window.weiboUI) {
            window.weiboUI.refreshWeiboList();
          }
          MobilePhone.showToast(`‚úÖ Â∑≤ÂàáÊç¢Âà∞${newIsMainAccount ? 'Â§ßÂè∑' : 'Â∞èÂè∑'}`, 'success');
        } else {
          console.error('[Mobile Phone] ÂæÆÂçöÁÆ°ÁêÜÂô®Êú™Â∞±Áª™');
        }
      });
      headerRight.appendChild(switchAccountBtn);
    } else if (state.app === 'settings') {
      const searchBtn = document.createElement('button');
      searchBtn.className = 'app-header-btn';
      searchBtn.innerHTML = 'üîç';
      searchBtn.title = 'ÊêúÁ¥¢';
      searchBtn.addEventListener('click', () => this.showSettingsSearch());
      headerRight.appendChild(searchBtn);
    } else if (state.app === 'shop') {
      const viewBtn = document.createElement('button');
      viewBtn.className = 'app-header-btn shop-accent-btn';
      viewBtn.innerHTML = 'Êü•Áúã';
      viewBtn.title = 'Êü•ÁúãÂïÜÂìÅ';
      viewBtn.addEventListener('click', () => {
        if (window.shopAppSendViewMessage) {
          window.shopAppSendViewMessage();
        }
      });
      headerRight.appendChild(viewBtn);

      const categoryBtn = document.createElement('button');
      categoryBtn.className = 'app-header-btn shop-accent-btn';
      categoryBtn.innerHTML = 'ÂàÜÁ±ª';
      categoryBtn.title = 'Â±ïÂºÄÂàÜÁ±ª';
      categoryBtn.addEventListener('click', () => {
        if (window.shopAppToggleCategories) {
          window.shopAppToggleCategories();
        } else if (window.shopAppShowCategories) {
          window.shopAppShowCategories();
        }
      });
      headerRight.appendChild(categoryBtn);
    } else if (state.app === 'backpack') {
      const categoryBtn = document.createElement('button');
      categoryBtn.className = 'app-header-btn';
      categoryBtn.innerHTML = 'ÂàÜÁ±ª';
      categoryBtn.title = 'Â±ïÂºÄÂàÜÁ±ª';
      categoryBtn.addEventListener('click', () => {
        if (window.backpackAppToggleCategories) {
          window.backpackAppToggleCategories();
        }
      });
      headerRight.appendChild(categoryBtn);

      const searchBtn = document.createElement('button');
      searchBtn.className = 'app-header-btn';
      searchBtn.innerHTML = 'üîç';
      searchBtn.title = 'ÊêúÁ¥¢Áâ©ÂìÅ';
      searchBtn.addEventListener('click', () => {
        if (window.backpackAppToggleSearch) {
          window.backpackAppToggleSearch();
        }
      });
      headerRight.appendChild(searchBtn);

      const refreshBtn = document.createElement('button');
      refreshBtn.className = 'app-header-btn';
      refreshBtn.innerHTML = '<<i class="fas fa-sync-alt"></</i>';
      refreshBtn.title = 'Âà∑Êñ∞ËÉåÂåÖ';
      refreshBtn.addEventListener('click', () => {
        if (window.backpackAppRefresh) {
          window.backpackAppRefresh();
        }
      });
      headerRight.appendChild(refreshBtn);
    } else if (state.app === 'live') {
      const viewerBadge = document.createElement('div');
      viewerBadge.className = 'viewer-count';
      viewerBadge.title = 'Êú¨Âú∫‰∫∫Êï∞';
      viewerBadge.innerHTML = `<<i class="fas fa-user-friends"></</i><span class="viewer-count-num">${
        state.viewerCount || '-'
      }</span>`;
      headerRight.appendChild(viewerBadge);

      const giftBtn = document.createElement('button');
      giftBtn.className = 'app-header-btn gift-log-btn';
      giftBtn.title = 'Á§ºÁâ©ÊµÅÊ∞¥';
      giftBtn.innerHTML = 'üéÅ';
      giftBtn.addEventListener('click', () => {
        if (window.liveAppShowModal) {
          window.liveAppShowModal('gift-modal');
        }
      });
      headerRight.appendChild(giftBtn);

      const endBtn = document.createElement('button');
      endBtn.className = 'app-header-btn end-stream-btn';
      endBtn.title = 'ÁªìÊùüÁõ¥Êí≠';
      endBtn.innerHTML = '‚≠ïÔ∏è';
      endBtn.addEventListener('click', () => {
        if (window.liveAppEndLive) {
          window.liveAppEndLive();
        }
      });
      headerRight.appendChild(endBtn);
    } else if (state.app === 'watch-live') {
      const viewerBadge = document.createElement('div');
      viewerBadge.className = 'viewer-count';
      viewerBadge.title = 'Êú¨Âú∫‰∫∫Êï∞';
      viewerBadge.innerHTML = `<<i class="fas fa-user-friends"></</i><span class="viewer-count-num">${
        state.viewerCount || '-'
      }</span>`;
      headerRight.appendChild(viewerBadge);

      const exitBtn = document.createElement('button');
      exitBtn.className = 'app-header-btn end-stream-btn';
      exitBtn.title = 'ÈÄÄÂá∫Áõ¥Êí≠Èó¥';
      exitBtn.innerHTML = 'üö™';
      exitBtn.addEventListener('click', () => {
        if (window.watchLiveAppEndLive) {
          window.watchLiveAppEndLive();
        }
      });
      headerRight.appendChild(exitBtn);
    }
  }

  pushAppState(state) {
    if (!state || !state.app) {
      console.warn('[Mobile Phone] Êé®ÈÄÅÁä∂ÊÄÅÊó†ÊïàÔºåË∑≥Ëøá:', state);
      return;
    }

    const currentState = this.currentAppState;
    if (currentState && this.isSameAppState(currentState, state)) {
      return;
    }

    const topState = this.appStack[this.appStack.length - 1];
    if (topState && this.isSameAppState(topState, state)) {
      return;
    }

    this.appStack.push(state);
    this.currentAppState = state;
    this.currentApp = state.app;
    this.updateAppHeader(state);
  }

  isSameAppState(state1, state2) {
    if (!state1 || !state2) return false;
    return state1.app === state2.app &&
           state1.view === state2.view &&
           state1.friendId === state2.friendId &&
           state1.threadId === state2.threadId &&
           state1.title === state2.title;
  }

  refreshMessages() {
    if (window.messageApp && window.messageApp.refreshMessageList) {
      window.messageApp.refreshMessageList();
    }
  }

  refreshMessageDetail() {
    if (window.messageApp && window.messageApp.refreshMessageDetail) {
      window.messageApp.refreshMessageDetail();
    }
  }

  showMessageList() {
    if (window.messageApp && window.messageApp.showMessageList) {
      window.messageApp.showMessageList();
    } else {
      console.error('[Mobile Phone] messageAppÂÆû‰æã‰∏çÂ≠òÂú®ÊàñshowMessageListÊñπÊ≥ï‰∏çÂèØÁî®');
    }
  }

  showMessageDetail(friendId, friendName) {
    if (window.messageApp && window.messageApp.showMessageDetail) {
      window.messageApp.showMessageDetail(friendId, friendName);
    } else {
      console.error('[Mobile Phone] messageAppÂÆû‰æã‰∏çÂ≠òÂú®ÊàñshowMessageDetailÊñπÊ≥ï‰∏çÂèØÁî®');
    }
  }

  toggleGallerySelect() {
    console.log('[Mobile Phone] ÂàáÊç¢Áõ∏ÂÜåÈÄâÊã©Ê®°Âºè');
  }

  showSettingsSearch() {
    console.log('[Mobile Phone] ÊòæÁ§∫ËÆæÁΩÆÊêúÁ¥¢');
  }

  showAddFriend() {
    if (window.messageApp && window.messageApp.showAddFriend) {
      window.messageApp.showAddFriend();
    } else {
      console.error('[Mobile Phone] messageAppÂÆû‰æã‰∏çÂ≠òÂú®ÊàñshowAddFriendÊñπÊ≥ï‰∏çÂèØÁî®');
    }
  }

  async generateFriendsCircleContent() {
    try {
      if (window.showMobileToast) {
        window.showMobileToast('üé≠ Ê≠£Âú®ÁîüÊàêÊúãÂèãÂúàÂÜÖÂÆπ...', 'info');
      }

      const message =
        'Áî®Êà∑Ê≠£Âú®Êü•ÁúãÊúãÂèãÂúàÔºåËØ∑Ê†πÊçÆÊúãÂèãÂúàËßÑÂàôÁ≥ªÁªüÔºåÁîüÊàê3-5‰∏™Ê≠£Á°ÆÁöÑÊúãÂèãÂúàÊ†ºÂºèÔºåÊ†πÊçÆËßíËâ≤Èó¥ÁöÑÂÖ≥Á≥ª‰∏∫ÊØèÊù°ÊúãÂèãÂúàÁîüÊàê0-5Êù°ÂõûÂ§ç„ÄÇÂõûÂ§çËØ∑‰ΩøÁî®‰∏éÂéüÊ•ºÂ±ÇÁõ∏Âêåid„ÄÇËØ∑‰ΩøÁî®Ê≠£Á°ÆÁöÑ‰∏â‰ΩçÊï∞Ê•ºÂ±Çid,Ê•ºÂ±Çid‰∏çËÉΩ‰∏éÂéÜÂè≤Ê•ºÂ±ÇidÈáçÂ§ç„ÄÇËØ∑Ê≠£Á°Æ‰ΩøÁî®ÂâçÁºÄsÊàñw„ÄÇ‰∏•Á¶Å‰ª£ÊõøÁî®Êà∑ÂõûÂ§ç„ÄÇÁ¶ÅÊ≠¢ÂèëË°®ÊÉÖÂåÖÊàñÈ¢úÊñáÂ≠óÔºåÂèØ‰ª•‰ΩøÁî®emoji„ÄÇ';

      if (window.friendsCircle && window.friendsCircle.sendToAI) {
        await window.friendsCircle.sendToAI(message);
        if (window.showMobileToast) {
          window.showMobileToast('‚úÖ ÊúãÂèãÂúàÂÜÖÂÆπÁîüÊàêÂÆåÊàê', 'success');
        }
      } else {
        console.error('[Mobile Phone] ÊúãÂèãÂúàÂäüËÉΩÊú™Â∞±Áª™');
        if (window.showMobileToast) {
          window.showMobileToast('‚ùå ÊúãÂèãÂúàÂäüËÉΩÊú™Â∞±Áª™', 'error');
        }
      }
    } catch (error) {
      console.error('[Mobile Phone] ÁîüÊàêÊúãÂèãÂúàÂÜÖÂÆπÂ§±Ë¥•:', error);
      if (window.showMobileToast) {
        window.showMobileToast('‚ùå ÁîüÊàêÂ§±Ë¥•: ' + error.message, 'error');
      }
    }
  }

  saveAddFriend() {
    if (window.messageApp && window.messageApp.addFriend) {
      window.messageApp.addFriend();
    } else {
      console.error('[Mobile Phone] messageAppÂÆû‰æã‰∏çÂ≠òÂú®ÊàñaddFriendÊñπÊ≥ï‰∏çÂèØÁî®');
    }
  }

  registerApps() {
    this.apps = {
      messages: {
        name: '‰ø°ÊÅØ',
        content: null,
        isCustomApp: true,
        customHandler: this.handleMessagesApp.bind(this),
      },
      gallery: {
        name: 'Áõ∏ÂÜå',
        content: `
                    <div class="gallery-app">
                        <div class="photo-grid">
                            <div class="photo-item">üñºÔ∏è</div>
                            <div class="photo-item">üå∏</div>
                            <div class="photo-item">üåô</div>
                            <div class="photo-item">‚≠ê</div>
                            <div class="photo-item">üéÄ</div>
                            <div class="photo-item">üíê</div>
                        </div>
                    </div>
                `,
      },
      settings: {
        name: 'ËÆæÁΩÆ',
        content: null,
        isCustomApp: true,
        customHandler: this.handleSettingsApp.bind(this),
      },
      forum: {
        name: 'ËÆ∫Âùõ',
        content: null,
        isCustomApp: true,
        customHandler: this.handleForumApp.bind(this),
      },
      weibo: {
        name: 'ÂæÆÂçö',
        content: null,
        isCustomApp: true,
        customHandler: this.handleWeiboApp.bind(this),
      },
      api: {
        name: 'APIËÆæÁΩÆ',
        content: null,
        isCustomApp: true,
        customHandler: this.handleApiApp.bind(this),
      },
      diary: {
        name: 'Êó•ËÆ∞',
        content: `
                    <div class="diary-app">
                        <div class="diary-header">
                            <h3>ÊàëÁöÑÊó•ËÆ∞ üìù</h3>
                        </div>
                        <div class="diary-content">
                            <div class="diary-entry">
                                <div class="entry-date">‰ªäÂ§©</div>
                                <div class="entry-text">‰ªäÂ§©Â§©Ê∞îÂæàÂ•ΩÔºåÂøÉÊÉÖ‰πüÂæàÊ£íÔºÅÂú®SillyTavernÈáåÈÅáÂà∞‰∫ÜÂæàÂ§öÊúâË∂£ÁöÑËßíËâ≤ÔΩû</div>
                            </div>
                            <div class="diary-entry">
                                <div class="entry-date">Êò®Â§©</div>
                                <div class="entry-text">Â≠¶‰π†‰∫ÜÊñ∞ÁöÑÂâçÁ´ØÊäÄÊúØÔºåÊÑüËßâÂæàÊúâÊàêÂ∞±ÊÑü„ÄÇ</div>
                            </div>
                        </div>
                    </div>
                `,
      },
      mail: {
        name: 'ÈÇÆ‰ª∂',
        content: `
                    <div class="mail-app">
                        <div class="mail-list">
                            <div class="mail-item unread">
                                <div class="mail-sender">SillyTavern</div>
                                <div class="mail-subject">Ê¨¢Ëøé‰ΩøÁî®ÊâãÊú∫ÁïåÈù¢</div>
                                <div class="mail-preview">ËøôÊòØ‰∏Ä‰∏™ÂèØÁà±ÁöÑÊâãÊú∫ÁïåÈù¢Ê°ÜÊû∂...</div>
                                <div class="mail-time">1Â∞èÊó∂Ââç</div>
                            </div>
                            <div class="mail-item">
                                <div class="mail-sender">Á≥ªÁªüÈÄöÁü•</div>
                                <div class="mail-subject">Êèí‰ª∂Êõ¥Êñ∞ÊèêÈÜí</div>
                                <div class="mail-preview">Mobile ContextÊèí‰ª∂Â∑≤Êõ¥Êñ∞...</div>
                                <div class="mail-time">2Â∞èÊó∂Ââç</div>
                            </div>
                        </div>
                    </div>
                `,
      },
      shop: {
        name: 'Ë¥≠Áâ©',
        content: null,
        isCustomApp: true,
        customHandler: this.handleShopApp.bind(this),
      },
      backpack: {
        name: 'ËÉåÂåÖ',
        content: null,
        isCustomApp: true,
        customHandler: this.handleBackpackApp.bind(this),
      },
      task: {
        name: '‰ªªÂä°',
        content: null,
        isCustomApp: true,
        customHandler: this.handleTaskApp.bind(this),
      },
      live: {
        name: 'Áõ¥Êí≠',
        content: null,
        isCustomApp: true,
        customHandler: this.handleLiveApp.bind(this),
      },
      browser: {
      name: 'ÊµèËßàÂô®',
      content: '<div style="padding:20px; text-align:center;">ÊµèËßàÂô®Â∫îÁî®Ê≠£Âú®ÂºÄÂèë‰∏≠...</div>',
      },
      journal: {
      name: 'ÊâãÂ∏ê',
      content: '<div style="padding:20px; text-align:center;">ÊâãÂ∏êÂ∫îÁî®Ê≠£Âú®ÂºÄÂèë‰∏≠...</div>',
      },
      'yuse-theater': {
      name: 'Ê¨≤Ëâ≤ÂâßÂú∫',
      content: null,
      isCustomApp: true,
      customHandler: this.handleYuseTheaterApp.bind(this),
      },
      redbook: {
      name: 'Â∞èÁ∫¢‰π¶',
      content: '<div style="padding:20px; text-align:center;">Â∞èÁ∫¢‰π¶Â∫îÁî®Ê≠£Âú®ÂºÄÂèë‰∏≠...</div>',
      },
      aoka: {
      name: 'Âó∑Âíî',
      content: '<div style="padding:20px; text-align:center;">Âó∑ÂíîÂ∫îÁî®Ê≠£Âú®ÂºÄÂèë‰∏≠...</div>',
      },
      'watch-live': {
        name: 'ËßÇÁúãÁõ¥Êí≠',
        content: null,
        isCustomApp: true,
        customHandler: this.handleWatchLiveApp.bind(this),
      },
      'parallel-events': {
        name: 'Âπ≥Ë°å‰∫ã‰ª∂',
        content: null,
        isCustomApp: true,
        customHandler: this.handleParallelEventsApp.bind(this),
      },
    };
  }

  togglePhone() {
    if (this.isVisible) {
      this.hidePhone();
    } else {
      this.showPhone();
    }
  }

  showPhone() {
    const container = document.getElementById('mobile-phone-container');
    container.style.display = 'flex';
    setTimeout(() => {
      container.classList.add('active');
    }, 10);
    this.isVisible = true;
    this.isPhoneActive = true;

    this.initStyleConfigManager();

    if (this.currentAppState) {
      document.getElementById('home-screen').style.display = 'none';
      document.getElementById('app-screen').style.display = 'block';
      this.restoreAppState(this.currentAppState);
    }

    this.startStateSyncLoop();

    if (window.MobileContextPlugin && window.MobileContextPlugin.updatePointerEventsSettings) {
      window.MobileContextPlugin.updatePointerEventsSettings();
    }
  }

  hidePhone() {
    const container = document.getElementById('mobile-phone-container');
    container.classList.remove('active');
    setTimeout(() => {
      container.style.display = 'none';
    }, 300);
    this.isVisible = false;
    this.isPhoneActive = false;

    // Ê¨≤Ëâ≤ÂâßÂú∫ÈÄÄÂá∫Êó∂Ê∏ÖÁêÜÔºàÂç≥Êó∂ÈîÄÊØÅÔºâ
    const yuseRefreshBtn = document.getElementById('yuse-refresh-btn');
    if (yuseRefreshBtn) {
      yuseRefreshBtn.remove();
      console.log('[YuseTheater] ÈöêËóèÁïåÈù¢Ëß¶ÂèëÊåâÈíÆÊ∏ÖÁêÜ');
    }

    this.stopStateSyncLoop();
  }

  initStyleConfigManager() {
    if (
      window.styleConfigManager &&
      window.styleConfigManager.isConfigReady &&
      window.styleConfigManager.isConfigReady()
    ) {
      return;
    }

    if (window.StyleConfigManager && !window.styleConfigManager) {
      try {
        window.styleConfigManager = new window.StyleConfigManager();
      } catch (error) {
        console.error('[Mobile Phone] ‚ùå ÂàõÂª∫Ê†∑ÂºèÈÖçÁΩÆÁÆ°ÁêÜÂô®ÂÆû‰æãÂ§±Ë¥•:', error);
      }
    } else if (!window.StyleConfigManager) {
      this.loadStyleConfigManager();
    }
  }

  async loadStyleConfigManager() {
    try {
      const existingScript = document.querySelector('script[src*="style-config-manager.js"]');
      if (existingScript) {
        setTimeout(() => {
          if (window.StyleConfigManager && !window.styleConfigManager) {
            window.styleConfigManager = new window.StyleConfigManager();
          }
        }, 1000);
        return;
      }

      const script = document.createElement('script');
      script.src = '/scripts/extensions/third-party/mobile/app/style-config-manager.js';
      script.type = 'text/javascript';
      script.onload = () => {
        setTimeout(() => {
          if (window.StyleConfigManager && !window.styleConfigManager) {
            try {
              window.styleConfigManager = new window.StyleConfigManager();
            } catch (error) {
              console.error('[Mobile Phone] ‚ùå ÂàõÂª∫Ê†∑ÂºèÈÖçÁΩÆÁÆ°ÁêÜÂô®ÂÆû‰æãÂ§±Ë¥•:', error);
            }
          }
        }, 500);
      };
      script.onerror = error => {
        console.error('[Mobile Phone] ‚ùå Ê†∑ÂºèÈÖçÁΩÆÁÆ°ÁêÜÂô®ËÑöÊú¨Âä†ËΩΩÂ§±Ë¥•:', error);
      };
      document.head.appendChild(script);
    } catch (error) {
      console.error('[Mobile Phone] ‚ùå Âä®ÊÄÅÂä†ËΩΩÊ†∑ÂºèÈÖçÁΩÆÁÆ°ÁêÜÂô®Â§±Ë¥•:', error);
    }
  }

  openApp(appName) {
    if (this._openingApp === appName) {
      return;
    }

    const app = this.apps[appName];
    if (!app) {
      console.warn('[Mobile Phone] Â∫îÁî®‰∏çÂ≠òÂú®:', appName);
      return;
    }

    if (this.currentApp === appName &&
        this.currentAppState &&
        this.currentAppState.app === appName &&
        this.isAppRootPage(this.currentAppState)) {
      return;
    }

    // ÂàáÊç¢Â∫îÁî®Êó∂Ê∏ÖÁêÜÊ¨≤Ëâ≤ÂâßÂú∫ÊåâÈíÆÔºàÂç≥Êó∂ÈîÄÊØÅÔºâ
    if (this.currentApp === 'yuse-theater' && appName !== 'yuse-theater') {
      const yuseBtn = document.getElementById('yuse-refresh-btn');
      if (yuseBtn) {
        yuseBtn.remove();
        console.log(`[YuseTheater] ÂàáÊç¢Âà∞${appName}ÔºåÊ∏ÖÁêÜÂâßÂú∫ÊåâÈíÆ`);
      }
    }

    this._userNavigationIntent = {
      targetApp: appName,
      timestamp: Date.now(),
      fromApp: this.currentApp
    };

    this._openingApp = appName;
    try {
      const needsAsyncLoading = ['forum', 'weibo', 'api'].includes(appName);
      if (needsAsyncLoading) {
        this.showAppLoadingState(appName, app.name);
        this._loadingApps.add(appName);
        this._loadingStartTime[appName] = Date.now();
      }

      this.currentApp = appName;

      const appState = {
        app: appName,
        title: app.name,
        view: appName === 'messages' ? 'messageList' : 'main',
      };

      this.appStack = [appState];
      this.currentAppState = appState;
      this.updateAppHeader(appState);

      if (app.isCustomApp && app.customHandler) {
        app.customHandler();
      } else {
        document.getElementById('app-content').innerHTML = app.content;
      }

      document.getElementById('home-screen').style.display = 'none';
      document.getElementById('app-screen').style.display = 'block';

      document.getElementById('app-screen').classList.add('slide-in');
      setTimeout(() => {
        document.getElementById('app-screen').classList.remove('slide-in');
      }, 300);
    } finally {
      setTimeout(() => {
        this._openingApp = null;
      }, 500);
    }
  }

  showAppLoadingState(appName, appTitle) {
    const loadingContent = `
      <div class="app-loading-container">
        <div class="loading-spinner">
          <div class="spinner-ring"></div>
        </div>
        <div class="loading-text">Ê≠£Âú®Âä†ËΩΩ ${appTitle}...</div>
        <div class="loading-tip">È¶ñÊ¨°Âä†ËΩΩÂèØËÉΩÈúÄË¶ÅÂá†ÁßíÈíü</div>
        <div class="loading-progress">
          <div class="progress-bar">
            <div class="progress-fill" id="loading-progress-${appName}"></div>
          </div>
        </div>
      </div>
    `;
    document.getElementById('app-content').innerHTML = loadingContent;
    this.simulateLoadingProgress(appName);
  }

  simulateLoadingProgress(appName) {
    const progressBar = document.getElementById(`loading-progress-${appName}`);
    if (!progressBar) return;

    let progress = 0;
    const interval = setInterval(() => {
      if (!this._loadingApps.has(appName) || this._userNavigationIntent?.targetApp !== appName) {
        clearInterval(interval);
        return;
      }

      progress += Math.random() * 15 + 5;
      if (progress > 90) progress = 90;
      progressBar.style.width = `${progress}%`;
    }, 200);

    setTimeout(() => {
      clearInterval(interval);
    }, 10000);
  }

  isUserNavigationIntentValid(appName) {
    if (!this._userNavigationIntent) return false;

    const intent = this._userNavigationIntent;
    const now = Date.now();

    if (now - intent.timestamp > 30000) {
      return false;
    }

    if (intent.targetApp !== appName) {
      return false;
    }

    if (this.currentApp !== appName) {
      return false;
    }

    return true;
  }

  completeAppLoading(appName) {
    this._loadingApps.delete(appName);

    if (this._loadingStartTime[appName]) {
      const loadTime = Date.now() - this._loadingStartTime[appName];
      console.log(`[Mobile Phone] ${appName} Âä†ËΩΩËÄóÊó∂: ${loadTime}ms`);
      delete this._loadingStartTime[appName];
    }

    if (!this.isUserNavigationIntentValid(appName)) {
      return false;
    }

    const progressBar = document.getElementById(`loading-progress-${appName}`);
    if (progressBar) {
      progressBar.style.width = '100%';
    }

    return true;
  }

  async handleForumApp() {
    try {
      document.getElementById('app-content').innerHTML = `
                <div class="loading-placeholder">
                    <div class="loading-icon">‚è≥</div>
                    <div class="loading-text">Ê≠£Âú®Âä†ËΩΩËÆ∫Âùõ...</div>
                </div>
            `;

      const loadWithTimeout = (promise, timeout = 15000) => {
        return Promise.race([
          promise,
          new Promise((_, reject) => setTimeout(() => reject(new Error('ËÆ∫ÂùõÊ®°ÂùóÂä†ËΩΩË∂ÖÊó∂')), timeout)),
        ]);
      };

      try {
        await loadWithTimeout(this.loadForumApp());
      } catch (error) {
        console.error('[Mobile Phone] ËÆ∫ÂùõÊ®°ÂùóÂä†ËΩΩÂ§±Ë¥•ÔºåÂ∞ùËØïÈáçÊñ∞Âä†ËΩΩ:', error);
        window._forumAppLoading = null;
        await loadWithTimeout(this.loadForumApp());
      }

      if (!this.completeAppLoading('forum')) {
        return;
      }

      let currentState = this.appStack[this.appStack.length - 1];
      if (!currentState || currentState.app !== 'forum') {
        const initialState = {
          app: 'forum',
          title: 'ËÆ∫Âùõ',
          view: 'main',
        };
        this.pushAppState(initialState);
        currentState = initialState;
      }

      const view = currentState.view || 'main';
      let content = '';
      if (view === 'forumControl') {
        if (!window.getForumControlAppContent) {
          throw new Error('getForumControlAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
        }
        content = window.getForumControlAppContent();
      } else {
        if (!window.getForumAppContent) {
          throw new Error('getForumAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
        }
        content = window.getForumAppContent();
      }

      if (!content || content.trim() === '') {
        throw new Error(`ËÆ∫Âùõ${view === 'forumControl' ? 'ÊéßÂà∂' : '‰∏ªÁïåÈù¢'}ÂÜÖÂÆπ‰∏∫Á©∫`);
      }

      document.getElementById('app-content').innerHTML = content;

      if (view === 'forumControl') {
        if (window.bindForumControlEvents) {
          window.bindForumControlEvents();
        }
      } else {
        if (window.bindForumEvents) {
          window.bindForumEvents();
        }
      }

      setTimeout(() => {
        const forumStyleSelect = document.getElementById('forum-style-select');
        if (forumStyleSelect) {
          this.initializeForumStyleSelector(forumStyleSelect);
        }
      }, 500);
    } catch (error) {
      console.error('[Mobile Phone] Â§ÑÁêÜËÆ∫ÂùõÂ∫îÁî®Â§±Ë¥•:', error);
      this._loadingApps.delete('forum');
      document.getElementById('app-content').innerHTML = `
                <div class="error-placeholder">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-text">ËÆ∫ÂùõÂä†ËΩΩÂ§±Ë¥•</div>
                    <div class="error-detail">${error.message}</div>
                    <button onclick="window.mobilePhone.handleForumApp()" class="retry-button">ÈáçËØï</button>
                </div>
            `;
    }
  }

  async handleWeiboApp() {
    try {
      document.getElementById('app-content').innerHTML = `
                <div class="loading-placeholder">
                    <div class="loading-icon">‚è≥</div>
                    <div class="loading-text">Ê≠£Âú®Âä†ËΩΩÂæÆÂçö...</div>
                </div>
            `;

      const loadWithTimeout = (promise, timeout = 15000) => {
        return Promise.race([
          promise,
          new Promise((_, reject) => setTimeout(() => reject(new Error('ÂæÆÂçöÊ®°ÂùóÂä†ËΩΩË∂ÖÊó∂')), timeout)),
        ]);
      };

      try {
        await loadWithTimeout(this.loadWeiboApp());
      } catch (error) {
        console.error('[Mobile Phone] ÂæÆÂçöÊ®°ÂùóÂä†ËΩΩÂ§±Ë¥•ÔºåÂ∞ùËØïÈáçÊñ∞Âä†ËΩΩ:', error);
        window._weiboAppLoading = null;
        await loadWithTimeout(this.loadWeiboApp());
      }

      if (!this.completeAppLoading('weibo')) {
        return;
      }

      const currentState = this.appStack[this.appStack.length - 1] || { view: 'main' };
      const view = currentState.view || 'main';
      let content = '';

      if (view === 'weiboControl') {
        if (!window.getWeiboControlAppContent) {
          throw new Error('getWeiboControlAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
        }
        content = window.getWeiboControlAppContent();
      } else {
        if (!window.getWeiboAppContent) {
          throw new Error('getWeiboAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
        }
        content = window.getWeiboAppContent();
      }

      if (!content || content.trim() === '') {
        throw new Error(`ÂæÆÂçö${view === 'weiboControl' ? 'ÊéßÂà∂' : '‰∏ªÁïåÈù¢'}ÂÜÖÂÆπ‰∏∫Á©∫`);
      }

      document.getElementById('app-content').innerHTML = content;

      if (view === 'weiboControl') {
        if (window.bindWeiboControlEvents) {
          window.bindWeiboControlEvents();
        }
      } else {
        if (window.bindWeiboEvents) {
          window.bindWeiboEvents();
        }
      }
    } catch (error) {
      console.error('[Mobile Phone] Â§ÑÁêÜÂæÆÂçöÂ∫îÁî®Â§±Ë¥•:', error);
      this._loadingApps.delete('weibo');
      document.getElementById('app-content').innerHTML = `
                <div class="error-placeholder">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-text">ÂæÆÂçöÂä†ËΩΩÂ§±Ë¥•</div>
                    <div class="error-detail">${error.message}</div>
                    <button onclick="window.mobilePhone.handleWeiboApp()" class="retry-button">ÈáçËØï</button>
                </div>
            `;
    }
  }

  async handleSettingsApp() {
    try {
      document.getElementById('app-content').innerHTML = `
                <div class="loading-placeholder">
                    <div class="loading-icon">‚è≥</div>
                    <div class="loading-text">Ê≠£Âú®Âä†ËΩΩÊ†∑ÂºèËÆæÁΩÆ...</div>
                </div>
            `;

      await this.loadStyleConfigApp();

      if (!window.getStyleConfigAppContent) {
        throw new Error('getStyleConfigAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
      }

      const content = window.getStyleConfigAppContent();
      if (!content || content.trim() === '') {
        throw new Error('Ê†∑ÂºèÈÖçÁΩÆÂ∫îÁî®ÂÜÖÂÆπ‰∏∫Á©∫');
      }

      document.getElementById('app-content').innerHTML = content;

      if (window.bindStyleConfigEvents) {
        window.bindStyleConfigEvents();
      }

      if (window.styleConfigManager && !window.styleConfigManager.isConfigReady()) {
        const loadingHint = document.createElement('div');
        loadingHint.className = 'config-loading-hint';
        loadingHint.innerHTML = `
                    <div style="
                        position: fixed;
                        top: 20px;
                        left: 50%;
                        transform: translateX(-50%);
                        background: #2196F3;
                        color: white;
                        padding: 10px 20px;
                        border-radius: 20px;
                        font-size: 14px;
                        z-index: 10000;
                        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                    ">
                        ‚è≥ Ê≠£Âú®ÂàùÂßãÂåñÊ†∑ÂºèÈÖçÁΩÆÁÆ°ÁêÜÂô®...
                    </div>
                `;
        document.body.appendChild(loadingHint);

        window.styleConfigManager
          .waitForReady()
          .then(() => {
            if (loadingHint.parentNode) {
              loadingHint.remove();
            }
          })
          .catch(error => {
            console.error('[Mobile Phone] Á≠âÂæÖÊ†∑ÂºèÈÖçÁΩÆÁÆ°ÁêÜÂô®Â§±Ë¥•:', error);
            if (loadingHint.parentNode) {
              loadingHint.innerHTML = `
                            <div style="
                                position: fixed;
                                top: 20px;
                                left: 50%;
                                transform: translateX(-50%);
                                background: #ff4444;
                                color: white;
                                padding: 10px 20px;
                                border-radius: 20px;
                                font-size: 14px;
                                z-index: 10000;
                                box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                            ">
                                ‚ùå Ê†∑ÂºèÈÖçÁΩÆÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂ§±Ë¥•
                            </div>
                        `;
              setTimeout(() => loadingHint.remove(), 3000);
            }
          });
      }
    } catch (error) {
      console.error('[Mobile Phone] Â§ÑÁêÜËÆæÁΩÆÂ∫îÁî®Â§±Ë¥•:', error);
      document.getElementById('app-content').innerHTML = `
                <div class="error-state">
                    <div class="error-icon">‚ö†Ô∏è</div>
                    <div class="error-title">ËÆæÁΩÆÂ∫îÁî®Âä†ËΩΩÂ§±Ë¥•</div>
                    <div class="error-message">${error.message}</div>
                    <button onclick="window.mobilePhone.handleSettingsApp()" class="retry-button">ÈáçËØï</button>
                </div>
            `;
    }
  }

  async handleMessagesApp() {
    try {
      document.getElementById('app-content').innerHTML = `
                <div class="loading-placeholder">
                    <div class="loading-icon">‚è≥</div>
                    <div class="loading-text">Ê≠£Âú®Âä†ËΩΩÊ∂àÊÅØÂ∫îÁî®...</div>
                </div>
            `;

      await this.loadMessageApp();

      if (!window.getMessageAppContent) {
        throw new Error('getMessageAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
      }

      const content = window.getMessageAppContent();
      if (!content || content.trim() === '') {
        throw new Error('Ê∂àÊÅØÂ∫îÁî®ÂÜÖÂÆπ‰∏∫Á©∫');
      }

      document.getElementById('app-content').innerHTML = content;

      if (window.bindMessageAppEvents) {
        window.bindMessageAppEvents();
      }

      if (!this.currentAppState || this.currentAppState.app !== 'messages') {
        const messageState = {
          app: 'messages',
          title: '‰ø°ÊÅØ',
          view: 'messageList',
        };
        this.currentAppState = messageState;
        this.appStack = [messageState];
        this.updateAppHeader(messageState);
      }
    } catch (error) {
      console.error('[Mobile Phone] Âä†ËΩΩÊ∂àÊÅØÂ∫îÁî®Â§±Ë¥•:', error);
      document.getElementById('app-content').innerHTML = `
                <div class="error-message">
                    <div class="error-icon">‚ö†Ô∏è</div>
                    <div class="error-title">Âä†ËΩΩÂ§±Ë¥•</div>
                    <div class="error-details">${error.message}</div>
                    <button class="retry-button" onclick="window.MobilePhone.openApp('messages')">
                        ÈáçËØï
                    </button>
                </div>
            `;
    }
  }

  async handleYuseTheaterApp() {
    try {
      document.getElementById('app-content').innerHTML = `
                <div class="loading-placeholder">
                    <div class="loading-icon">‚è≥</div>
                    <div class="loading-text">Ê≠£Âú®Âä†ËΩΩÊ¨≤Ëâ≤ÂâßÂú∫...</div>
                </div>
            `;

      await this.loadYuseTheaterApp();

      if (!window.getYuseTheaterAppContent) {
        throw new Error('getYuseTheaterAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
      }

      const content = window.getYuseTheaterAppContent();
      if (!content || content.trim() === '') {
        throw new Error('Ê¨≤Ëâ≤ÂâßÂú∫Â∫îÁî®ÂÜÖÂÆπ‰∏∫Á©∫');
      }

      document.getElementById('app-content').innerHTML = content;

      if (window.bindYuseTheaterAppEvents) {
        window.bindYuseTheaterAppEvents();
      }

      // ÂàùÂßãÂåñÊó∂Ëß¶ÂèëÁä∂ÊÄÅÂêåÊ≠•ÔºàÁ°Æ‰øùÊåâÈíÆÊòæÁ§∫Ôºâ
      if (this.currentAppState && this.currentAppState.app === 'yuse-theater') {
        this.updateAppHeader(this.currentAppState);
      }
    } catch (error) {
      console.error('[Mobile Phone] Â§ÑÁêÜÊ¨≤Ëâ≤ÂâßÂú∫Â∫îÁî®Â§±Ë¥•:', error);
      document.getElementById('app-content').innerHTML = `
                <div class="error-placeholder">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-text">Ê¨≤Ëâ≤ÂâßÂú∫Âä†ËΩΩÂ§±Ë¥•</div>
                    <div class="error-detail">${error.message}</div>
                    <button onclick="window.mobilePhone.handleYuseTheaterApp()" class="retry-button">ÈáçËØï</button>
                </div>
            `;
    }
  }

  async handleShopApp() {
    try {
      document.getElementById('app-content').innerHTML = `
                <div class="loading-placeholder">
                    <div class="loading-icon">‚è≥</div>
                    <div class="loading-text">Ê≠£Âú®Âä†ËΩΩË¥≠Áâ©Â∫îÁî®...</div>
                </div>
            `;

      await this.loadShopApp();

      if (!window.getShopAppContent) {
        throw new Error('getShopAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
      }

      const content = window.getShopAppContent();
      if (!content || content.trim() === '') {
        throw new Error('Ë¥≠Áâ©Â∫îÁî®ÂÜÖÂÆπ‰∏∫Á©∫');
      }

      document.getElementById('app-content').innerHTML = content;

      if (window.bindShopAppEvents) {
        window.bindShopAppEvents();
      }
    } catch (error) {
      console.error('[Mobile Phone] Â§ÑÁêÜË¥≠Áâ©Â∫îÁî®Â§±Ë¥•:', error);
      document.getElementById('app-content').innerHTML = `
                <div class="error-placeholder">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-text">Ë¥≠Áâ©Â∫îÁî®Âä†ËΩΩÂ§±Ë¥•</div>
                    <div class="error-detail">${error.message}</div>
                    <button onclick="window.mobilePhone.handleShopApp()" class="retry-button">ÈáçËØï</button>
                </div>
            `;
    }
  }

  async handleBackpackApp() {
    try {
      document.getElementById('app-content').innerHTML = `
                <div class="loading-placeholder">
                    <div class="loading-icon">‚è≥</div>
                    <div class="loading-text">Ê≠£Âú®Âä†ËΩΩËÉåÂåÖÂ∫îÁî®...</div>
</div>
            `;

      await this.loadBackpackApp();

      if (!window.getBackpackAppContent) {
        throw new Error('getBackpackAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
      }

      const content = window.getBackpackAppContent();
      if (!content || content.trim() === '') {
        throw new Error('ËÉåÂåÖÂ∫îÁî®ÂÜÖÂÆπ‰∏∫Á©∫');
      }

      document.getElementById('app-content').innerHTML = content;

      if (window.bindBackpackAppEvents) {
        window.bindBackpackAppEvents();
      }
    } catch (error) {
      console.error('[Mobile Phone] Â§ÑÁêÜËÉåÂåÖÂ∫îÁî®Â§±Ë¥•:', error);
      document.getElementById('app-content').innerHTML = `
                <div class="error-placeholder">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-text">ËÉåÂåÖÂ∫îÁî®Âä†ËΩΩÂ§±Ë¥•</div>
                    <div class="error-detail">${error.message}</div>
                    <button onclick="window.mobilePhone.handleBackpackApp()" class="retry-button">ÈáçËØï</button>
                </div>
            `;
    }
  }

  async handleTaskApp() {
    try {
      document.getElementById('app-content').innerHTML = `
                <div class="loading-placeholder">
                    <div class="loading-icon">‚è≥</div>
                    <div class="loading-text">Ê≠£Âú®Âä†ËΩΩ‰ªªÂä°Â∫îÁî®...</div>
                </div>
            `;

      await this.loadTaskApp();

      if (!window.getTaskAppContent) {
        throw new Error('getTaskAppContent ÂáΩÊï∞Êú™ÊâæÂà∞');
      }

      const content = window.getTaskAppContent();
      if (!content || content.trim() === '') {
        throw new Error('‰ªªÂä°Â∫îÁî®ÂÜÖÂÆπ‰∏∫Á©∫');
      }

      document.getElementById('app-content').innerHTML = content;

      if (window.bindTaskAppEvents) {
        window.bindTaskAppEvents();
      }
    } catch (error) {
      console.error('[Mobile Phone] Â§ÑÁêÜ‰ªªÂä°Â∫îÁî®Â§±Ë¥•:', error);
      document.getElementById('app-content').innerHTML = `
                <div class="error-placeholder">
                    <div class="error-icon">‚ùå</div>
                    <div class="error-text">‰ªªÂä°Â∫îÁî®Âä†ËΩΩÂ§±Ë¥•</div>
                    <div class="error-detail">${error.message}</div>
                    <button onclick="window.mobilePhone.handleTaskApp()" class="retry-button">ÈáçËØï</button>
                </div>
            `;
    }
  }

  async handleLiveApp() {
